
TEST(istream_be, read_u16)
{
    uint16_t value;
    uint8_t buffer[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                        0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f};

    lts::istream_be stream_be(buffer, sizeof(buffer));
    EXPECT_TRUE(stream_be.is_valid());

    EXPECT_TRUE(stream_be.read_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x0001), value);

    EXPECT_TRUE(stream_be.read_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x0203), value);

    EXPECT_TRUE(stream_be.read_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x0405), value);

    EXPECT_TRUE(stream_be.read_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x0607), value);

    EXPECT_TRUE(stream_be.read_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x8889), value);

    EXPECT_TRUE(stream_be.read_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x8a8b), value);

    EXPECT_TRUE(stream_be.read_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x8c8d), value);

    EXPECT_TRUE(stream_be.read_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x8e8f), value);

    stream_be.set_error_function(
        [](const lts::stream_position& before, const lts::stream_position& after){
            EXPECT_EQ(lts::stream_position(16, 0), before);
            EXPECT_EQ(lts::stream_position(18, 0), after);
        }
    );

    EXPECT_FALSE(stream_be.read_u16(value));

    stream_be.skip_bits(1);

    stream_be.set_error_function(
        [](const lts::stream_position& before, const lts::stream_position& after){
            EXPECT_EQ(lts::stream_position(16, 1), before);
            EXPECT_EQ(lts::stream_position(18, 1), after);
        }
    );

    EXPECT_FALSE(stream_be.read_u16(value));

    stream_be.clear_error_function();
    std::cout << (std::string)stream_be << std::endl;
}

TEST(istream_be, peek_u16)
{
    uint16_t value;
    uint8_t buffer[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                        0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f};

    lts::istream_be stream_be(buffer, sizeof(buffer));
    EXPECT_TRUE(stream_be.is_valid());

    EXPECT_TRUE(stream_be.peek_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x0001), value);

    EXPECT_TRUE(stream_be.peek_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x0001), value);

    EXPECT_TRUE(stream_be.peek_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x0001), value);

    stream_be.skip(1);

    EXPECT_TRUE(stream_be.peek_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x0102), value);

    stream_be.skip(13);

    EXPECT_TRUE(stream_be.peek_u16(value));
    EXPECT_EQ(static_cast<uint16_t>(0x8e8f), value);

    stream_be.skip(1);

    stream_be.set_error_function(
        [](const lts::stream_position& before, const lts::stream_position& after){
            EXPECT_EQ(lts::stream_position(15, 0), before);
            EXPECT_EQ(lts::stream_position(17, 0), after);
        }
    );

    EXPECT_FALSE(stream_be.peek_u16(value));

    stream_be.skip_bits(1);

    stream_be.set_error_function(
        [](const lts::stream_position& before, const lts::stream_position& after){
            EXPECT_EQ(lts::stream_position(15, 1), before);
            EXPECT_EQ(lts::stream_position(17, 1), after);
        }
    );

    EXPECT_FALSE(stream_be.peek_u16(value));

    stream_be.clear_error_function();
    std::cout << (std::string)stream_be << std::endl;
}
