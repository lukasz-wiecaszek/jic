/* Constructs a shared_ptr with no managed object, i.e. epmty shared_ptr */

TEST(shared_ptr, create_1_onstack)
{
    shared_ptr<base> sptr;

    EXPECT_EQ(0, sptr.use_count());
    EXPECT_FALSE(sptr);

    std::cout << (std::string)sptr << std::endl;
}

TEST(shared_ptr, create_1_onheap)
{
    shared_ptr<base> *sptr = new shared_ptr<base>;

    EXPECT_EQ(0, sptr->use_count());
    EXPECT_FALSE(*sptr);

    std::cout << sptr->to_string() << std::endl;
    delete sptr;
}

TEST(shared_ptr, create_2_onstack)
{
    shared_ptr<base> sptr(nullptr);

    EXPECT_EQ(0, sptr.use_count());
    EXPECT_FALSE(sptr);

    std::cout << (std::string)sptr << std::endl;
}

TEST(shared_ptr, create_2_onheap)
{
    shared_ptr<base> *sptr = new shared_ptr<base>(nullptr);

    EXPECT_EQ(0, sptr->use_count());
    EXPECT_FALSE(*sptr);

    std::cout << sptr->to_string() << std::endl;
    delete sptr;
}

/* Constructs a shared_ptr from a T derived types */

TEST(shared_ptr, create_3_onstack)
{
    shared_ptr<base> sptr(new base(1));

    EXPECT_EQ(1, sptr.use_count());
    EXPECT_TRUE(sptr);

    std::cout << (std::string)sptr << std::endl;
}

TEST(shared_ptr, create_3_onheap)
{
    shared_ptr<base> *sptr = new shared_ptr<base>(new base(1));

    EXPECT_EQ(1, sptr->use_count());
    EXPECT_TRUE(*sptr);

    std::cout << sptr->to_string() << std::endl;
    delete sptr;
}

TEST(shared_ptr, create_4_onstack)
{
    shared_ptr<base> sptr(new base(1), deleter());

    EXPECT_EQ(1, sptr.use_count());
    EXPECT_TRUE(sptr);

    std::cout << (std::string)sptr << std::endl;
}

TEST(shared_ptr, create_4_onheap)
{
    shared_ptr<base> *sptr = new shared_ptr<base>(new base(1), deleter());

    EXPECT_EQ(1, sptr->use_count());
    EXPECT_TRUE(*sptr);

    std::cout << sptr->to_string() << std::endl;
    delete sptr;
}

TEST(shared_ptr, create_5_onstack)
{
    shared_ptr<base> sptr1(new base(1));
    shared_ptr<base> sptr2(sptr1);

    EXPECT_EQ(2, sptr1.use_count());
    EXPECT_TRUE(sptr1);

    EXPECT_EQ(2, sptr2.use_count());
    EXPECT_TRUE(sptr2);

    std::cout << (std::string)sptr1 << std::endl;
    std::cout << (std::string)sptr2 << std::endl;
}

TEST(shared_ptr, create_5_onheap)
{
    shared_ptr<base> *sptr1 = new shared_ptr<base>(new base(1));
    shared_ptr<base> *sptr2 = sptr1;

    EXPECT_EQ(1, sptr1->use_count());
    EXPECT_TRUE(*sptr1);

    EXPECT_EQ(1, sptr2->use_count());
    EXPECT_TRUE(*sptr2);

    std::cout << sptr1->to_string() << std::endl;
    std::cout << sptr2->to_string() << std::endl;

    delete sptr1;
}

TEST(shared_ptr, create_6_onstack)
{
    shared_ptr<base> sptr1(new base(1));
    shared_ptr<base> sptr2(std::move(sptr1));

    EXPECT_EQ(0, sptr1.use_count());
    EXPECT_FALSE(sptr1);

    EXPECT_EQ(1, sptr2.use_count());
    EXPECT_TRUE(sptr2);

    std::cout << (std::string)sptr1 << std::endl;
    std::cout << (std::string)sptr2 << std::endl;
}

TEST(shared_ptr, create_6_onheap)
{
    shared_ptr<base> *sptr1 = new shared_ptr<base>(new base(1));
    shared_ptr<base> *sptr2 = std::move(sptr1);

    EXPECT_EQ(1, sptr1->use_count());
    EXPECT_TRUE(*sptr1);

    EXPECT_EQ(1, sptr2->use_count());
    EXPECT_TRUE(*sptr2);

    std::cout << sptr1->to_string() << std::endl;
    std::cout << sptr2->to_string() << std::endl;

    delete sptr1;
}

/* Constructs a shared_ptr from a U derived types, where U* must be convertible to T* */

TEST(shared_ptr, create_7_onstack)
{
    shared_ptr<base> sptr(new derived(1));

    EXPECT_EQ(1, sptr.use_count());
    EXPECT_TRUE(sptr);

    std::cout << (std::string)sptr << std::endl;
}

TEST(shared_ptr, create_7_onheap)
{
    shared_ptr<base> *sptr = new shared_ptr<base>(new derived(1));

    EXPECT_EQ(1, sptr->use_count());
    EXPECT_TRUE(*sptr);

    std::cout << sptr->to_string() << std::endl;
    delete sptr;
}

TEST(shared_ptr, create_8_onstack)
{
    shared_ptr<base> sptr(new derived(1), deleter());

    EXPECT_EQ(1, sptr.use_count());
    EXPECT_TRUE(sptr);

    std::cout << (std::string)sptr << std::endl;
}

TEST(shared_ptr, create_8_onheap)
{
    shared_ptr<base> *sptr = new shared_ptr<base>(new derived(1), deleter());

    EXPECT_EQ(1, sptr->use_count());
    EXPECT_TRUE(*sptr);

    std::cout << sptr->to_string() << std::endl;
    delete sptr;
}

TEST(shared_ptr, create_9_onstack)
{
    shared_ptr<derived> sptr1(new derived(1));
    shared_ptr<base> sptr2(sptr1);

    EXPECT_EQ(2, sptr1.use_count());
    EXPECT_TRUE(sptr1);

    EXPECT_EQ(2, sptr2.use_count());
    EXPECT_TRUE(sptr2);

    std::cout << (std::string)sptr1 << std::endl;
    std::cout << (std::string)sptr2 << std::endl;
}

TEST(shared_ptr, create_9_onheap)
{
    shared_ptr<derived> *sptr1 = new shared_ptr<derived>(new derived(1));
    shared_ptr<base> *sptr2 = reinterpret_cast<shared_ptr<base>*>(sptr1);

    EXPECT_EQ(1, sptr1->use_count());
    EXPECT_TRUE(*sptr1);

    EXPECT_EQ(1, sptr2->use_count());
    EXPECT_TRUE(*sptr2);

    std::cout << sptr1->to_string() << std::endl;
    std::cout << sptr2->to_string() << std::endl;

    delete sptr1;
}

TEST(shared_ptr, create_10_onstack)
{
    shared_ptr<derived> sptr1(new derived(1));
    shared_ptr<base> sptr2(std::move(sptr1));

    EXPECT_EQ(0, sptr1.use_count());
    EXPECT_FALSE(sptr1);

    EXPECT_EQ(1, sptr2.use_count());
    EXPECT_TRUE(sptr2);

    std::cout << (std::string)sptr1 << std::endl;
    std::cout << (std::string)sptr2 << std::endl;
}

TEST(shared_ptr, create_10_onheap)
{
    shared_ptr<base> *sptr1 = new shared_ptr<base>(new derived(1));
    shared_ptr<base> *sptr2 = std::move(sptr1);

    EXPECT_EQ(1, sptr1->use_count());
    EXPECT_TRUE(*sptr1);

    EXPECT_EQ(1, sptr2->use_count());
    EXPECT_TRUE(*sptr2);

    std::cout << sptr1->to_string() << std::endl;
    std::cout << sptr2->to_string() << std::endl;

    delete sptr1;
}
