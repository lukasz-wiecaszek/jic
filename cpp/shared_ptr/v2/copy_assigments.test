#if !defined(USE_STD_SHARED_PTR)

TEST(shared_ptr, copy_assigment_operator_1)
{
    base *ptr = new base(1);
    shared_ptr<base> sptr;

    EXPECT_EQ(0, sptr.use_count());
    EXPECT_FALSE(sptr);

    sptr = ptr;

    EXPECT_EQ(1, sptr.use_count());
    EXPECT_TRUE(sptr);

    sptr = ptr;

    EXPECT_EQ(1, sptr.use_count());
    EXPECT_TRUE(sptr);
}

#endif

TEST(shared_ptr, copy_assigment_operator_2)
{
    shared_ptr<base> sptr1(new base(1));
    shared_ptr<base> sptr2;

    EXPECT_EQ(1, sptr1.use_count());
    EXPECT_TRUE(sptr1);

    EXPECT_EQ(0, sptr2.use_count());
    EXPECT_FALSE(sptr2);

    sptr2 = sptr1;

    EXPECT_EQ(2, sptr1.use_count());
    EXPECT_TRUE(sptr1);

    EXPECT_EQ(2, sptr2.use_count());
    EXPECT_TRUE(sptr2);

    sptr2 = sptr1;

    EXPECT_EQ(2, sptr1.use_count());
    EXPECT_TRUE(sptr1);

    EXPECT_EQ(2, sptr2.use_count());
    EXPECT_TRUE(sptr2);

    shared_ptr<base> nullsptr(nullptr);
    sptr2 = nullsptr;

    EXPECT_EQ(0, nullsptr.use_count());
    EXPECT_FALSE(nullsptr);

    EXPECT_EQ(0, sptr2.use_count());
    EXPECT_FALSE(sptr2);
}

TEST(shared_ptr, copy_assigment_operator_3)
{
    shared_ptr<base> sptr1(new base(1));
    shared_ptr<base> sptr2;

    EXPECT_EQ(1, sptr1.use_count());
    EXPECT_TRUE(sptr1);

    EXPECT_EQ(0, sptr2.use_count());
    EXPECT_FALSE(sptr2);

    sptr2 = std::move(sptr1);

    EXPECT_EQ(0, sptr1.use_count());
    EXPECT_FALSE(sptr1);

    EXPECT_EQ(1, sptr2.use_count());
    EXPECT_TRUE(sptr2);

    sptr2 = std::move(sptr2);

    EXPECT_EQ(0, sptr1.use_count());
    EXPECT_FALSE(sptr1);

    EXPECT_EQ(1, sptr2.use_count());
    EXPECT_TRUE(sptr2);
}

#if !defined(USE_STD_SHARED_PTR)

TEST(shared_ptr, copy_assigment_operator_4)
{
    derived *ptr = new derived(1);
    shared_ptr<base> sptr;

    EXPECT_EQ(0, sptr.use_count());
    EXPECT_FALSE(sptr);

    sptr = ptr;

    EXPECT_EQ(1, sptr.use_count());
    EXPECT_TRUE(sptr);

    sptr = ptr;

    EXPECT_EQ(1, sptr.use_count());
    EXPECT_TRUE(sptr);
}

#endif

TEST(shared_ptr, copy_assigment_operator_5)
{
    shared_ptr<derived> sptr1(new derived(1));
    shared_ptr<base> sptr2;

    EXPECT_EQ(1, sptr1.use_count());
    EXPECT_TRUE(sptr1);

    EXPECT_EQ(0, sptr2.use_count());
    EXPECT_FALSE(sptr2);

    sptr2 = sptr1;

    EXPECT_EQ(2, sptr1.use_count());
    EXPECT_TRUE(sptr1);

    EXPECT_EQ(2, sptr2.use_count());
    EXPECT_TRUE(sptr2);

    sptr2 = sptr1;

    EXPECT_EQ(2, sptr1.use_count());
    EXPECT_TRUE(sptr1);

    EXPECT_EQ(2, sptr2.use_count());
    EXPECT_TRUE(sptr2);

    shared_ptr<derived> nullsptr(nullptr);
    sptr2 = nullsptr;

    EXPECT_EQ(0, nullsptr.use_count());
    EXPECT_FALSE(nullsptr);

    EXPECT_EQ(0, sptr2.use_count());
    EXPECT_FALSE(sptr2);
}

TEST(shared_ptr, copy_assigment_operator_6)
{
    shared_ptr<derived> sptr1(new derived(1));
    shared_ptr<base> sptr2;

    EXPECT_EQ(1, sptr1.use_count());
    EXPECT_TRUE(sptr1);

    EXPECT_EQ(0, sptr2.use_count());
    EXPECT_FALSE(sptr2);

    sptr2 = std::move(sptr1);

    EXPECT_EQ(0, sptr1.use_count());
    EXPECT_FALSE(sptr1);

    EXPECT_EQ(1, sptr2.use_count());
    EXPECT_TRUE(sptr2);

    shared_ptr<derived> sptr3(nullptr);
    shared_ptr<base> sptr4;

    sptr4 = std::move(sptr3);

    EXPECT_EQ(0, sptr3.use_count());
    EXPECT_FALSE(sptr3);

    EXPECT_EQ(0, sptr4.use_count());
    EXPECT_FALSE(sptr4);
}
