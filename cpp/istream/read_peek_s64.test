
TEST(istream, read_s64_be)
{
    int64_t value;
    uint8_t buffer[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                        0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f};

    ymn::istream<STREAM_BYTE_ORDER_BIG_ENDIAN> stream_be(buffer, sizeof(buffer));
    EXPECT_TRUE(stream_be.is_valid());

    EXPECT_TRUE(stream_be.read_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x0001020304050607), value);

    EXPECT_TRUE(stream_be.read_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x88898a8b8c8d8e8f), value);

    stream_be.set_error_function(
        [](const ymn::istream_position& before, const ymn::istream_position& after){
            EXPECT_EQ(ymn::istream_position(16, 0), before);
            EXPECT_EQ(ymn::istream_position(24, 0), after);
        }
    );

    EXPECT_FALSE(stream_be.read_s64(value));

    stream_be.skip_bits(1);

    stream_be.set_error_function(
        [](const ymn::istream_position& before, const ymn::istream_position& after){
            EXPECT_EQ(ymn::istream_position(16, 1), before);
            EXPECT_EQ(ymn::istream_position(24, 1), after);
        }
    );

    EXPECT_FALSE(stream_be.read_s64(value));

    std::cout << (std::string)stream_be << std::endl;
}

TEST(istream, read_s64_le)
{
    int64_t value;
    uint8_t buffer[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                        0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f};

    ymn::istream<STREAM_BYTE_ORDER_LITTLE_ENDIAN> stream_le(buffer, sizeof(buffer));
    EXPECT_TRUE(stream_le.is_valid());

    EXPECT_TRUE(stream_le.read_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x0706050403020100), value);

    EXPECT_TRUE(stream_le.read_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x8f8e8d8c8b8a8988), value);

    stream_le.set_error_function(
        [](const ymn::istream_position& before, const ymn::istream_position& after){
            EXPECT_EQ(ymn::istream_position(16, 0), before);
            EXPECT_EQ(ymn::istream_position(24, 0), after);
        }
    );

    EXPECT_FALSE(stream_le.read_s64(value));

    stream_le.skip_bits(1);

    stream_le.set_error_function(
        [](const ymn::istream_position& before, const ymn::istream_position& after){
            EXPECT_EQ(ymn::istream_position(16, 1), before);
            EXPECT_EQ(ymn::istream_position(24, 1), after);
        }
    );

    EXPECT_FALSE(stream_le.read_s64(value));

    std::cout << (std::string)stream_le << std::endl;
}

TEST(istream, peek_s64_be)
{
    int64_t value;
    uint8_t buffer[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                        0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f};

    ymn::istream<STREAM_BYTE_ORDER_BIG_ENDIAN> stream_be(buffer, sizeof(buffer));
    EXPECT_TRUE(stream_be.is_valid());

    EXPECT_TRUE(stream_be.peek_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x0001020304050607), value);

    EXPECT_TRUE(stream_be.peek_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x0001020304050607), value);

    EXPECT_TRUE(stream_be.peek_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x0001020304050607), value);

    stream_be.skip(1);

    EXPECT_TRUE(stream_be.peek_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x0102030405060788), value);

    stream_be.skip(7);

    EXPECT_TRUE(stream_be.peek_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x88898a8b8c8d8e8f), value);

    stream_be.skip(1);

    stream_be.set_error_function(
        [](const ymn::istream_position& before, const ymn::istream_position& after){
            EXPECT_EQ(ymn::istream_position(9, 0), before);
            EXPECT_EQ(ymn::istream_position(17, 0), after);
        }
    );

    EXPECT_FALSE(stream_be.peek_s64(value));

    stream_be.skip_bits(1);

    stream_be.set_error_function(
        [](const ymn::istream_position& before, const ymn::istream_position& after){
            EXPECT_EQ(ymn::istream_position(9, 1), before);
            EXPECT_EQ(ymn::istream_position(17, 1), after);
        }
    );

    EXPECT_FALSE(stream_be.peek_s64(value));

    std::cout << (std::string)stream_be << std::endl;
}

TEST(istream, peek_s64_le)
{
    int64_t value;
    uint8_t buffer[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                        0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f};

    ymn::istream<STREAM_BYTE_ORDER_LITTLE_ENDIAN> stream_le(buffer, sizeof(buffer));
    EXPECT_TRUE(stream_le.is_valid());

    EXPECT_TRUE(stream_le.peek_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x0706050403020100), value);

    EXPECT_TRUE(stream_le.peek_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x0706050403020100), value);

    EXPECT_TRUE(stream_le.peek_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x0706050403020100), value);

    stream_le.skip(1);

    EXPECT_TRUE(stream_le.peek_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x8807060504030201), value);

    stream_le.skip(7);

    EXPECT_TRUE(stream_le.peek_s64(value));
    EXPECT_EQ(static_cast<int64_t>(0x8f8e8d8c8b8a8988), value);

    stream_le.skip(1);

    stream_le.set_error_function(
        [](const ymn::istream_position& before, const ymn::istream_position& after){
            EXPECT_EQ(ymn::istream_position(9, 0), before);
            EXPECT_EQ(ymn::istream_position(17, 0), after);
        }
    );

    EXPECT_FALSE(stream_le.peek_s64(value));

    stream_le.skip_bits(1);

    stream_le.set_error_function(
        [](const ymn::istream_position& before, const ymn::istream_position& after){
            EXPECT_EQ(ymn::istream_position(9, 1), before);
            EXPECT_EQ(ymn::istream_position(17, 1), after);
        }
    );

    EXPECT_FALSE(stream_le.peek_s64(value));

    std::cout << (std::string)stream_le << std::endl;
}
